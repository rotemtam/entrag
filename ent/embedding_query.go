// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rotemtam/entrag/ent/chunk"
	"github.com/rotemtam/entrag/ent/embedding"
	"github.com/rotemtam/entrag/ent/predicate"
)

// EmbeddingQuery is the builder for querying Embedding entities.
type EmbeddingQuery struct {
	config
	ctx        *QueryContext
	order      []embedding.OrderOption
	inters     []Interceptor
	predicates []predicate.Embedding
	withChunk  *ChunkQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EmbeddingQuery builder.
func (eq *EmbeddingQuery) Where(ps ...predicate.Embedding) *EmbeddingQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EmbeddingQuery) Limit(limit int) *EmbeddingQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EmbeddingQuery) Offset(offset int) *EmbeddingQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EmbeddingQuery) Unique(unique bool) *EmbeddingQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EmbeddingQuery) Order(o ...embedding.OrderOption) *EmbeddingQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryChunk chains the current query on the "chunk" edge.
func (eq *EmbeddingQuery) QueryChunk() *ChunkQuery {
	query := (&ChunkClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(embedding.Table, embedding.FieldID, selector),
			sqlgraph.To(chunk.Table, chunk.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, embedding.ChunkTable, embedding.ChunkColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Embedding entity from the query.
// Returns a *NotFoundError when no Embedding was found.
func (eq *EmbeddingQuery) First(ctx context.Context) (*Embedding, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{embedding.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EmbeddingQuery) FirstX(ctx context.Context) *Embedding {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Embedding ID from the query.
// Returns a *NotFoundError when no Embedding ID was found.
func (eq *EmbeddingQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{embedding.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EmbeddingQuery) FirstIDX(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Embedding entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Embedding entity is found.
// Returns a *NotFoundError when no Embedding entities are found.
func (eq *EmbeddingQuery) Only(ctx context.Context) (*Embedding, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{embedding.Label}
	default:
		return nil, &NotSingularError{embedding.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EmbeddingQuery) OnlyX(ctx context.Context) *Embedding {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Embedding ID in the query.
// Returns a *NotSingularError when more than one Embedding ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EmbeddingQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{embedding.Label}
	default:
		err = &NotSingularError{embedding.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EmbeddingQuery) OnlyIDX(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Embeddings.
func (eq *EmbeddingQuery) All(ctx context.Context) ([]*Embedding, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryAll)
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Embedding, *EmbeddingQuery]()
	return withInterceptors[[]*Embedding](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EmbeddingQuery) AllX(ctx context.Context) []*Embedding {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Embedding IDs.
func (eq *EmbeddingQuery) IDs(ctx context.Context) (ids []int, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryIDs)
	if err = eq.Select(embedding.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EmbeddingQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EmbeddingQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryCount)
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EmbeddingQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EmbeddingQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EmbeddingQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryExist)
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EmbeddingQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EmbeddingQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EmbeddingQuery) Clone() *EmbeddingQuery {
	if eq == nil {
		return nil
	}
	return &EmbeddingQuery{
		config:     eq.config,
		ctx:        eq.ctx.Clone(),
		order:      append([]embedding.OrderOption{}, eq.order...),
		inters:     append([]Interceptor{}, eq.inters...),
		predicates: append([]predicate.Embedding{}, eq.predicates...),
		withChunk:  eq.withChunk.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithChunk tells the query-builder to eager-load the nodes that are connected to
// the "chunk" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmbeddingQuery) WithChunk(opts ...func(*ChunkQuery)) *EmbeddingQuery {
	query := (&ChunkClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withChunk = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Embedding pgvector.Vector `json:"embedding,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Embedding.Query().
//		GroupBy(embedding.FieldEmbedding).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EmbeddingQuery) GroupBy(field string, fields ...string) *EmbeddingGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EmbeddingGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = embedding.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Embedding pgvector.Vector `json:"embedding,omitempty"`
//	}
//
//	client.Embedding.Query().
//		Select(embedding.FieldEmbedding).
//		Scan(ctx, &v)
func (eq *EmbeddingQuery) Select(fields ...string) *EmbeddingSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EmbeddingSelect{EmbeddingQuery: eq}
	sbuild.label = embedding.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EmbeddingSelect configured with the given aggregations.
func (eq *EmbeddingQuery) Aggregate(fns ...AggregateFunc) *EmbeddingSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EmbeddingQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !embedding.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EmbeddingQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Embedding, error) {
	var (
		nodes       = []*Embedding{}
		withFKs     = eq.withFKs
		_spec       = eq.querySpec()
		loadedTypes = [1]bool{
			eq.withChunk != nil,
		}
	)
	if eq.withChunk != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, embedding.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Embedding).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Embedding{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withChunk; query != nil {
		if err := eq.loadChunk(ctx, query, nodes, nil,
			func(n *Embedding, e *Chunk) { n.Edges.Chunk = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EmbeddingQuery) loadChunk(ctx context.Context, query *ChunkQuery, nodes []*Embedding, init func(*Embedding), assign func(*Embedding, *Chunk)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Embedding)
	for i := range nodes {
		if nodes[i].chunk_id == nil {
			continue
		}
		fk := *nodes[i].chunk_id
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(chunk.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "chunk_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eq *EmbeddingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EmbeddingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(embedding.Table, embedding.Columns, sqlgraph.NewFieldSpec(embedding.FieldID, field.TypeInt))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, embedding.FieldID)
		for i := range fields {
			if fields[i] != embedding.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EmbeddingQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(embedding.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = embedding.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EmbeddingGroupBy is the group-by builder for Embedding entities.
type EmbeddingGroupBy struct {
	selector
	build *EmbeddingQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EmbeddingGroupBy) Aggregate(fns ...AggregateFunc) *EmbeddingGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EmbeddingGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, ent.OpQueryGroupBy)
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmbeddingQuery, *EmbeddingGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EmbeddingGroupBy) sqlScan(ctx context.Context, root *EmbeddingQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EmbeddingSelect is the builder for selecting fields of Embedding entities.
type EmbeddingSelect struct {
	*EmbeddingQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EmbeddingSelect) Aggregate(fns ...AggregateFunc) *EmbeddingSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EmbeddingSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, ent.OpQuerySelect)
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmbeddingQuery, *EmbeddingSelect](ctx, es.EmbeddingQuery, es, es.inters, v)
}

func (es *EmbeddingSelect) sqlScan(ctx context.Context, root *EmbeddingQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
