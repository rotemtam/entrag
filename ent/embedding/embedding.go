// Code generated by ent, DO NOT EDIT.

package embedding

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the embedding type in the database.
	Label = "embedding"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmbedding holds the string denoting the embedding field in the database.
	FieldEmbedding = "embedding"
	// EdgeChunk holds the string denoting the chunk edge name in mutations.
	EdgeChunk = "chunk"
	// Table holds the table name of the embedding in the database.
	Table = "embeddings"
	// ChunkTable is the table that holds the chunk relation/edge.
	ChunkTable = "embeddings"
	// ChunkInverseTable is the table name for the Chunk entity.
	// It exists in this package in order to avoid circular dependency with the "chunk" package.
	ChunkInverseTable = "chunks"
	// ChunkColumn is the table column denoting the chunk relation/edge.
	ChunkColumn = "chunk_id"
)

// Columns holds all SQL columns for embedding fields.
var Columns = []string{
	FieldID,
	FieldEmbedding,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "embeddings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"chunk_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Embedding queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmbedding orders the results by the embedding field.
func ByEmbedding(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmbedding, opts...).ToFunc()
}

// ByChunkField orders the results by chunk field.
func ByChunkField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChunkStep(), sql.OrderByField(field, opts...))
	}
}
func newChunkStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChunkInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ChunkTable, ChunkColumn),
	)
}
