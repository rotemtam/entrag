// Code generated by ent, DO NOT EDIT.

package chunk

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the chunk type in the database.
	Label = "chunk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldNchunk holds the string denoting the nchunk field in the database.
	FieldNchunk = "nchunk"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// EdgeEmbedding holds the string denoting the embedding edge name in mutations.
	EdgeEmbedding = "embedding"
	// Table holds the table name of the chunk in the database.
	Table = "chunks"
	// EmbeddingTable is the table that holds the embedding relation/edge.
	EmbeddingTable = "embeddings"
	// EmbeddingInverseTable is the table name for the Embedding entity.
	// It exists in this package in order to avoid circular dependency with the "embedding" package.
	EmbeddingInverseTable = "embeddings"
	// EmbeddingColumn is the table column denoting the embedding relation/edge.
	EmbeddingColumn = "chunk_id"
)

// Columns holds all SQL columns for chunk fields.
var Columns = []string{
	FieldID,
	FieldPath,
	FieldNchunk,
	FieldData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Chunk queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByNchunk orders the results by the nchunk field.
func ByNchunk(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNchunk, opts...).ToFunc()
}

// ByData orders the results by the data field.
func ByData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldData, opts...).ToFunc()
}

// ByEmbeddingField orders the results by embedding field.
func ByEmbeddingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmbeddingStep(), sql.OrderByField(field, opts...))
	}
}
func newEmbeddingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmbeddingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, EmbeddingTable, EmbeddingColumn),
	)
}
