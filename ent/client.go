// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/rotemtam/entrag/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rotemtam/entrag/ent/chunk"
	"github.com/rotemtam/entrag/ent/embedding"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Chunk is the client for interacting with the Chunk builders.
	Chunk *ChunkClient
	// Embedding is the client for interacting with the Embedding builders.
	Embedding *EmbeddingClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Chunk = NewChunkClient(c.config)
	c.Embedding = NewEmbeddingClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Chunk:     NewChunkClient(cfg),
		Embedding: NewEmbeddingClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		Chunk:     NewChunkClient(cfg),
		Embedding: NewEmbeddingClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Chunk.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Chunk.Use(hooks...)
	c.Embedding.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Chunk.Intercept(interceptors...)
	c.Embedding.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ChunkMutation:
		return c.Chunk.mutate(ctx, m)
	case *EmbeddingMutation:
		return c.Embedding.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ChunkClient is a client for the Chunk schema.
type ChunkClient struct {
	config
}

// NewChunkClient returns a client for the Chunk from the given config.
func NewChunkClient(c config) *ChunkClient {
	return &ChunkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chunk.Hooks(f(g(h())))`.
func (c *ChunkClient) Use(hooks ...Hook) {
	c.hooks.Chunk = append(c.hooks.Chunk, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chunk.Intercept(f(g(h())))`.
func (c *ChunkClient) Intercept(interceptors ...Interceptor) {
	c.inters.Chunk = append(c.inters.Chunk, interceptors...)
}

// Create returns a builder for creating a Chunk entity.
func (c *ChunkClient) Create() *ChunkCreate {
	mutation := newChunkMutation(c.config, OpCreate)
	return &ChunkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chunk entities.
func (c *ChunkClient) CreateBulk(builders ...*ChunkCreate) *ChunkCreateBulk {
	return &ChunkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ChunkClient) MapCreateBulk(slice any, setFunc func(*ChunkCreate, int)) *ChunkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ChunkCreateBulk{err: fmt.Errorf("calling to ChunkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ChunkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ChunkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chunk.
func (c *ChunkClient) Update() *ChunkUpdate {
	mutation := newChunkMutation(c.config, OpUpdate)
	return &ChunkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChunkClient) UpdateOne(ch *Chunk) *ChunkUpdateOne {
	mutation := newChunkMutation(c.config, OpUpdateOne, withChunk(ch))
	return &ChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChunkClient) UpdateOneID(id int) *ChunkUpdateOne {
	mutation := newChunkMutation(c.config, OpUpdateOne, withChunkID(id))
	return &ChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chunk.
func (c *ChunkClient) Delete() *ChunkDelete {
	mutation := newChunkMutation(c.config, OpDelete)
	return &ChunkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChunkClient) DeleteOne(ch *Chunk) *ChunkDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChunkClient) DeleteOneID(id int) *ChunkDeleteOne {
	builder := c.Delete().Where(chunk.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChunkDeleteOne{builder}
}

// Query returns a query builder for Chunk.
func (c *ChunkClient) Query() *ChunkQuery {
	return &ChunkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChunk},
		inters: c.Interceptors(),
	}
}

// Get returns a Chunk entity by its id.
func (c *ChunkClient) Get(ctx context.Context, id int) (*Chunk, error) {
	return c.Query().Where(chunk.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChunkClient) GetX(ctx context.Context, id int) *Chunk {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmbedding queries the embedding edge of a Chunk.
func (c *ChunkClient) QueryEmbedding(ch *Chunk) *EmbeddingQuery {
	query := (&EmbeddingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chunk.Table, chunk.FieldID, id),
			sqlgraph.To(embedding.Table, embedding.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, chunk.EmbeddingTable, chunk.EmbeddingColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChunkClient) Hooks() []Hook {
	return c.hooks.Chunk
}

// Interceptors returns the client interceptors.
func (c *ChunkClient) Interceptors() []Interceptor {
	return c.inters.Chunk
}

func (c *ChunkClient) mutate(ctx context.Context, m *ChunkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChunkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChunkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChunkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChunkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Chunk mutation op: %q", m.Op())
	}
}

// EmbeddingClient is a client for the Embedding schema.
type EmbeddingClient struct {
	config
}

// NewEmbeddingClient returns a client for the Embedding from the given config.
func NewEmbeddingClient(c config) *EmbeddingClient {
	return &EmbeddingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `embedding.Hooks(f(g(h())))`.
func (c *EmbeddingClient) Use(hooks ...Hook) {
	c.hooks.Embedding = append(c.hooks.Embedding, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `embedding.Intercept(f(g(h())))`.
func (c *EmbeddingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Embedding = append(c.inters.Embedding, interceptors...)
}

// Create returns a builder for creating a Embedding entity.
func (c *EmbeddingClient) Create() *EmbeddingCreate {
	mutation := newEmbeddingMutation(c.config, OpCreate)
	return &EmbeddingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Embedding entities.
func (c *EmbeddingClient) CreateBulk(builders ...*EmbeddingCreate) *EmbeddingCreateBulk {
	return &EmbeddingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmbeddingClient) MapCreateBulk(slice any, setFunc func(*EmbeddingCreate, int)) *EmbeddingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmbeddingCreateBulk{err: fmt.Errorf("calling to EmbeddingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmbeddingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmbeddingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Embedding.
func (c *EmbeddingClient) Update() *EmbeddingUpdate {
	mutation := newEmbeddingMutation(c.config, OpUpdate)
	return &EmbeddingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmbeddingClient) UpdateOne(e *Embedding) *EmbeddingUpdateOne {
	mutation := newEmbeddingMutation(c.config, OpUpdateOne, withEmbedding(e))
	return &EmbeddingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmbeddingClient) UpdateOneID(id int) *EmbeddingUpdateOne {
	mutation := newEmbeddingMutation(c.config, OpUpdateOne, withEmbeddingID(id))
	return &EmbeddingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Embedding.
func (c *EmbeddingClient) Delete() *EmbeddingDelete {
	mutation := newEmbeddingMutation(c.config, OpDelete)
	return &EmbeddingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmbeddingClient) DeleteOne(e *Embedding) *EmbeddingDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmbeddingClient) DeleteOneID(id int) *EmbeddingDeleteOne {
	builder := c.Delete().Where(embedding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmbeddingDeleteOne{builder}
}

// Query returns a query builder for Embedding.
func (c *EmbeddingClient) Query() *EmbeddingQuery {
	return &EmbeddingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmbedding},
		inters: c.Interceptors(),
	}
}

// Get returns a Embedding entity by its id.
func (c *EmbeddingClient) Get(ctx context.Context, id int) (*Embedding, error) {
	return c.Query().Where(embedding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmbeddingClient) GetX(ctx context.Context, id int) *Embedding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChunk queries the chunk edge of a Embedding.
func (c *EmbeddingClient) QueryChunk(e *Embedding) *ChunkQuery {
	query := (&ChunkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(embedding.Table, embedding.FieldID, id),
			sqlgraph.To(chunk.Table, chunk.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, embedding.ChunkTable, embedding.ChunkColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmbeddingClient) Hooks() []Hook {
	return c.hooks.Embedding
}

// Interceptors returns the client interceptors.
func (c *EmbeddingClient) Interceptors() []Interceptor {
	return c.inters.Embedding
}

func (c *EmbeddingClient) mutate(ctx context.Context, m *EmbeddingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmbeddingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmbeddingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmbeddingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmbeddingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Embedding mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Chunk, Embedding []ent.Hook
	}
	inters struct {
		Chunk, Embedding []ent.Interceptor
	}
)
