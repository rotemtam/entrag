// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	pgvector "github.com/pgvector/pgvector-go"
	"github.com/rotemtam/entrag/ent/chunk"
	"github.com/rotemtam/entrag/ent/embedding"
	"github.com/rotemtam/entrag/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChunk     = "Chunk"
	TypeEmbedding = "Embedding"
)

// ChunkMutation represents an operation that mutates the Chunk nodes in the graph.
type ChunkMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_path            *string
	nchunk           *int
	addnchunk        *int
	data             *string
	clearedFields    map[string]struct{}
	embedding        *int
	clearedembedding bool
	done             bool
	oldValue         func(context.Context) (*Chunk, error)
	predicates       []predicate.Chunk
}

var _ ent.Mutation = (*ChunkMutation)(nil)

// chunkOption allows management of the mutation configuration using functional options.
type chunkOption func(*ChunkMutation)

// newChunkMutation creates new mutation for the Chunk entity.
func newChunkMutation(c config, op Op, opts ...chunkOption) *ChunkMutation {
	m := &ChunkMutation{
		config:        c,
		op:            op,
		typ:           TypeChunk,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChunkID sets the ID field of the mutation.
func withChunkID(id int) chunkOption {
	return func(m *ChunkMutation) {
		var (
			err   error
			once  sync.Once
			value *Chunk
		)
		m.oldValue = func(ctx context.Context) (*Chunk, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chunk.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChunk sets the old Chunk of the mutation.
func withChunk(node *Chunk) chunkOption {
	return func(m *ChunkMutation) {
		m.oldValue = func(context.Context) (*Chunk, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChunkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChunkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChunkMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChunkMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chunk.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPath sets the "path" field.
func (m *ChunkMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *ChunkMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Chunk entity.
// If the Chunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunkMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *ChunkMutation) ResetPath() {
	m._path = nil
}

// SetNchunk sets the "nchunk" field.
func (m *ChunkMutation) SetNchunk(i int) {
	m.nchunk = &i
	m.addnchunk = nil
}

// Nchunk returns the value of the "nchunk" field in the mutation.
func (m *ChunkMutation) Nchunk() (r int, exists bool) {
	v := m.nchunk
	if v == nil {
		return
	}
	return *v, true
}

// OldNchunk returns the old "nchunk" field's value of the Chunk entity.
// If the Chunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunkMutation) OldNchunk(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNchunk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNchunk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNchunk: %w", err)
	}
	return oldValue.Nchunk, nil
}

// AddNchunk adds i to the "nchunk" field.
func (m *ChunkMutation) AddNchunk(i int) {
	if m.addnchunk != nil {
		*m.addnchunk += i
	} else {
		m.addnchunk = &i
	}
}

// AddedNchunk returns the value that was added to the "nchunk" field in this mutation.
func (m *ChunkMutation) AddedNchunk() (r int, exists bool) {
	v := m.addnchunk
	if v == nil {
		return
	}
	return *v, true
}

// ResetNchunk resets all changes to the "nchunk" field.
func (m *ChunkMutation) ResetNchunk() {
	m.nchunk = nil
	m.addnchunk = nil
}

// SetData sets the "data" field.
func (m *ChunkMutation) SetData(s string) {
	m.data = &s
}

// Data returns the value of the "data" field in the mutation.
func (m *ChunkMutation) Data() (r string, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Chunk entity.
// If the Chunk object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChunkMutation) OldData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *ChunkMutation) ResetData() {
	m.data = nil
}

// SetEmbeddingID sets the "embedding" edge to the Embedding entity by id.
func (m *ChunkMutation) SetEmbeddingID(id int) {
	m.embedding = &id
}

// ClearEmbedding clears the "embedding" edge to the Embedding entity.
func (m *ChunkMutation) ClearEmbedding() {
	m.clearedembedding = true
}

// EmbeddingCleared reports if the "embedding" edge to the Embedding entity was cleared.
func (m *ChunkMutation) EmbeddingCleared() bool {
	return m.clearedembedding
}

// EmbeddingID returns the "embedding" edge ID in the mutation.
func (m *ChunkMutation) EmbeddingID() (id int, exists bool) {
	if m.embedding != nil {
		return *m.embedding, true
	}
	return
}

// EmbeddingIDs returns the "embedding" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmbeddingID instead. It exists only for internal usage by the builders.
func (m *ChunkMutation) EmbeddingIDs() (ids []int) {
	if id := m.embedding; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmbedding resets all changes to the "embedding" edge.
func (m *ChunkMutation) ResetEmbedding() {
	m.embedding = nil
	m.clearedembedding = false
}

// Where appends a list predicates to the ChunkMutation builder.
func (m *ChunkMutation) Where(ps ...predicate.Chunk) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChunkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChunkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Chunk, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChunkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChunkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Chunk).
func (m *ChunkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChunkMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._path != nil {
		fields = append(fields, chunk.FieldPath)
	}
	if m.nchunk != nil {
		fields = append(fields, chunk.FieldNchunk)
	}
	if m.data != nil {
		fields = append(fields, chunk.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChunkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chunk.FieldPath:
		return m.Path()
	case chunk.FieldNchunk:
		return m.Nchunk()
	case chunk.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChunkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chunk.FieldPath:
		return m.OldPath(ctx)
	case chunk.FieldNchunk:
		return m.OldNchunk(ctx)
	case chunk.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown Chunk field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChunkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chunk.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case chunk.FieldNchunk:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNchunk(v)
		return nil
	case chunk.FieldData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown Chunk field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChunkMutation) AddedFields() []string {
	var fields []string
	if m.addnchunk != nil {
		fields = append(fields, chunk.FieldNchunk)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChunkMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chunk.FieldNchunk:
		return m.AddedNchunk()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChunkMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chunk.FieldNchunk:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNchunk(v)
		return nil
	}
	return fmt.Errorf("unknown Chunk numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChunkMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChunkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChunkMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chunk nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChunkMutation) ResetField(name string) error {
	switch name {
	case chunk.FieldPath:
		m.ResetPath()
		return nil
	case chunk.FieldNchunk:
		m.ResetNchunk()
		return nil
	case chunk.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown Chunk field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChunkMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.embedding != nil {
		edges = append(edges, chunk.EdgeEmbedding)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChunkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chunk.EdgeEmbedding:
		if id := m.embedding; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChunkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChunkMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChunkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedembedding {
		edges = append(edges, chunk.EdgeEmbedding)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChunkMutation) EdgeCleared(name string) bool {
	switch name {
	case chunk.EdgeEmbedding:
		return m.clearedembedding
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChunkMutation) ClearEdge(name string) error {
	switch name {
	case chunk.EdgeEmbedding:
		m.ClearEmbedding()
		return nil
	}
	return fmt.Errorf("unknown Chunk unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChunkMutation) ResetEdge(name string) error {
	switch name {
	case chunk.EdgeEmbedding:
		m.ResetEmbedding()
		return nil
	}
	return fmt.Errorf("unknown Chunk edge %s", name)
}

// EmbeddingMutation represents an operation that mutates the Embedding nodes in the graph.
type EmbeddingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	embedding     *pgvector.Vector
	clearedFields map[string]struct{}
	chunk         *int
	clearedchunk  bool
	done          bool
	oldValue      func(context.Context) (*Embedding, error)
	predicates    []predicate.Embedding
}

var _ ent.Mutation = (*EmbeddingMutation)(nil)

// embeddingOption allows management of the mutation configuration using functional options.
type embeddingOption func(*EmbeddingMutation)

// newEmbeddingMutation creates new mutation for the Embedding entity.
func newEmbeddingMutation(c config, op Op, opts ...embeddingOption) *EmbeddingMutation {
	m := &EmbeddingMutation{
		config:        c,
		op:            op,
		typ:           TypeEmbedding,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmbeddingID sets the ID field of the mutation.
func withEmbeddingID(id int) embeddingOption {
	return func(m *EmbeddingMutation) {
		var (
			err   error
			once  sync.Once
			value *Embedding
		)
		m.oldValue = func(ctx context.Context) (*Embedding, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Embedding.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmbedding sets the old Embedding of the mutation.
func withEmbedding(node *Embedding) embeddingOption {
	return func(m *EmbeddingMutation) {
		m.oldValue = func(context.Context) (*Embedding, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmbeddingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmbeddingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmbeddingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmbeddingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Embedding.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmbedding sets the "embedding" field.
func (m *EmbeddingMutation) SetEmbedding(pg pgvector.Vector) {
	m.embedding = &pg
}

// Embedding returns the value of the "embedding" field in the mutation.
func (m *EmbeddingMutation) Embedding() (r pgvector.Vector, exists bool) {
	v := m.embedding
	if v == nil {
		return
	}
	return *v, true
}

// OldEmbedding returns the old "embedding" field's value of the Embedding entity.
// If the Embedding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmbeddingMutation) OldEmbedding(ctx context.Context) (v pgvector.Vector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmbedding is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmbedding requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmbedding: %w", err)
	}
	return oldValue.Embedding, nil
}

// ResetEmbedding resets all changes to the "embedding" field.
func (m *EmbeddingMutation) ResetEmbedding() {
	m.embedding = nil
}

// SetChunkID sets the "chunk" edge to the Chunk entity by id.
func (m *EmbeddingMutation) SetChunkID(id int) {
	m.chunk = &id
}

// ClearChunk clears the "chunk" edge to the Chunk entity.
func (m *EmbeddingMutation) ClearChunk() {
	m.clearedchunk = true
}

// ChunkCleared reports if the "chunk" edge to the Chunk entity was cleared.
func (m *EmbeddingMutation) ChunkCleared() bool {
	return m.clearedchunk
}

// ChunkID returns the "chunk" edge ID in the mutation.
func (m *EmbeddingMutation) ChunkID() (id int, exists bool) {
	if m.chunk != nil {
		return *m.chunk, true
	}
	return
}

// ChunkIDs returns the "chunk" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChunkID instead. It exists only for internal usage by the builders.
func (m *EmbeddingMutation) ChunkIDs() (ids []int) {
	if id := m.chunk; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChunk resets all changes to the "chunk" edge.
func (m *EmbeddingMutation) ResetChunk() {
	m.chunk = nil
	m.clearedchunk = false
}

// Where appends a list predicates to the EmbeddingMutation builder.
func (m *EmbeddingMutation) Where(ps ...predicate.Embedding) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmbeddingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmbeddingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Embedding, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmbeddingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmbeddingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Embedding).
func (m *EmbeddingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmbeddingMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.embedding != nil {
		fields = append(fields, embedding.FieldEmbedding)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmbeddingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case embedding.FieldEmbedding:
		return m.Embedding()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmbeddingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case embedding.FieldEmbedding:
		return m.OldEmbedding(ctx)
	}
	return nil, fmt.Errorf("unknown Embedding field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbeddingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case embedding.FieldEmbedding:
		v, ok := value.(pgvector.Vector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmbedding(v)
		return nil
	}
	return fmt.Errorf("unknown Embedding field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmbeddingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmbeddingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmbeddingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Embedding numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmbeddingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmbeddingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmbeddingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Embedding nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmbeddingMutation) ResetField(name string) error {
	switch name {
	case embedding.FieldEmbedding:
		m.ResetEmbedding()
		return nil
	}
	return fmt.Errorf("unknown Embedding field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmbeddingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chunk != nil {
		edges = append(edges, embedding.EdgeChunk)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmbeddingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case embedding.EdgeChunk:
		if id := m.chunk; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmbeddingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmbeddingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmbeddingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchunk {
		edges = append(edges, embedding.EdgeChunk)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmbeddingMutation) EdgeCleared(name string) bool {
	switch name {
	case embedding.EdgeChunk:
		return m.clearedchunk
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmbeddingMutation) ClearEdge(name string) error {
	switch name {
	case embedding.EdgeChunk:
		m.ClearChunk()
		return nil
	}
	return fmt.Errorf("unknown Embedding unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmbeddingMutation) ResetEdge(name string) error {
	switch name {
	case embedding.EdgeChunk:
		m.ResetChunk()
		return nil
	}
	return fmt.Errorf("unknown Embedding edge %s", name)
}
